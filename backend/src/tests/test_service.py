import asyncio
from httpx import ASGITransport, AsyncClient
import pytest
from api.utils import calculate_control_digit
from main import app


@pytest.mark.asyncio()
async def test_calculate_control_digit():
    assert await calculate_control_digit(12345) == 7 #–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    assert await calculate_control_digit(71) == 0 #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –æ—Å—Ç–∞—Ç–∫–æ–º 0 –Ω–∞ —à–∞–≥–µ 4
    assert await calculate_control_digit(13011) == 0 #–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –æ—Å—Ç–∞—Ç–∫–æ–º 0 –Ω–∞ —à–∞–≥–µ 4

@pytest.mark.asyncio(loop_scope="session")
async def test_root():
    injection_tests = [
            # 1. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è UNION-based –∏–Ω—ä–µ–∫—Ü–∏—è
            "98080' UNION SELECT 1,2,3,4--",
            
            # 2. –ò–Ω—ä–µ–∫—Ü–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
            "98080' OR '1'='1'--",
            
            # 3. –ò–Ω—ä–µ–∫—Ü–∏—è —Å –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–º
            "98080' AND (SELECT COUNT(*) FROM links) > 0--",
            
            # 4. –ò–Ω—ä–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î
            "98080' AND 1=CAST((SELECT version()) AS int)--",
            
            # 5. –ò–Ω—ä–µ–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            "98080' OR link_id IS NOT NULL--",
            
            # 6. –ò–Ω—ä–µ–∫—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
            "98080'; DROP TABLE links--",
            
            # 7. –ò–Ω—ä–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü
            "98080' UNION SELECT link_id, full_link, short_link, create_date FROM links--",
            
            # 8. –ò–Ω—ä–µ–∫—Ü–∏—è —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤—Å–µ–≥–¥–∞ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è
            "98080' OR 'x'='x",
            
            # 9. –ò–Ω—ä–µ–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—à–∏–±–∫–∏
            "98080' AND 1=1--",
            
            # 10. –ò–Ω—ä–µ–∫—Ü–∏—è —Å –∫–∞–≤—ã—á–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
            '98080" OR "1"="1',
            
            # 11. –ò–Ω—ä–µ–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
            "98080' ORDER BY 1--",
            "98080' ORDER BY 4--",
            
            # 12. URL-encoded –∏–Ω—ä–µ–∫—Ü–∏–∏
            "98080%27%20OR%20%271%27%3D%271",
            "98080%22%20OR%20%221%22%3D%221",
        ]
     
    async with AsyncClient(
        transport=ASGITransport(app=app), base_url="http://test"
    ) as ac:
        for injection in injection_tests:
            response = await ac.get(f"/{injection}")
            # –û–∂–∏–¥–∞–µ–º –ª–∏–±–æ 404 (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ), –ª–∏–±–æ 300 (—Ä–µ–¥–∏—Ä–µ–∫—Ç), –Ω–æ –Ω–µ 500 (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞)
            assert response.status_code in [300, 404, 422], f"Injection {injection} caused unexpected status: {response.status_code}"
    

@pytest.mark.asyncio(loop_scope="session")
async def test_redirect_user_edge_cases():    
    # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–ª—è URL)
    edge_cases = [
        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        "",
        # –¢–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        "'",
        '"',
        # SQL –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        "SELECT",
        "DROP",
        "UNION",
        # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
        "A" * 500,
        # Unicode —Å–∏–º–≤–æ–ª—ã (–≤–∞–ª–∏–¥–Ω—ã–µ –≤ URL)
        "%D1%82%D0%B5%D1%81%D1%82",  # "—Ç–µ—Å—Ç" –≤ URL encoding
        "%F0%9F%8E%AF",  # "üéØ" –≤ URL encoding
        # –ü—Ä–æ–±–µ–ª—ã (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ + –∏–ª–∏ %20)
        "98080%20",
        "+98080+",
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏
        "98080' OR '1",
        # –ß–∏—Å–ª–æ–≤—ã–µ –∏–Ω—ä–µ–∫—Ü–∏–∏
        "0",
        "-1",
        "999999999",
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ URL encoding
        # "%00",  # NULL –±–∞–π—Ç
        "%0A",  # –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        "%0D",  # –≤–æ–∑–≤—Ä–∞—Ç –∫–∞—Ä–µ—Ç–∫–∏
    ]
    async with AsyncClient(
        transport=ASGITransport(app=app), base_url="http://test"
    ) as ac:
        for case in edge_cases:
            response = await ac.get(f"/{case}")
            # –û–∂–∏–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–Ω–µ 500 –æ—à–∏–±–∫—É)
            assert response.status_code != 500, f"Edge case {repr(case)} caused server error"


@pytest.mark.asyncio(loop_scope="session")
async def test_redirect_user_valid_cases():    
    # –¢–µ—Å—Ç—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    valid_cases = [
        "98080",
        "12345",
        "10000",
        "99999",
    ]
    
    async with AsyncClient(
        transport=ASGITransport(app=app), base_url="http://test"
    ) as ac:
        for case in valid_cases:
            response = await ac.get(f"/{case}")
            # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫ –æ–∂–∏–¥–∞–µ–º 300, –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö - 404
            assert response.status_code in [300, 404], f"Valid case {case} caused unexpected status: {response.status_code}"

@pytest.mark.asyncio(loop_scope="session")
async def test_paraller_post_requests():    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    num_requests = 100
    
    async def create_link(client, index):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º URL"""
        data = {"full_link": f"https://example.com/page{index}"}
        response = await client.post("/links", json=data)
        return response
    
    async with AsyncClient(
        transport=ASGITransport(app=app), base_url="http://test"
    ) as ac:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        tasks = [create_link(ac, i) for i in range(num_requests)]
        responses = await asyncio.gather(*tasks)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
        successful_responses = 0
        short_links = []
        
        for i, response in enumerate(responses):
            if response.status_code == 200:
                successful_responses += 1
                data = response.json()
                short_link = data["short_link"]
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å (–±–µ–∑ –¥–æ–º–µ–Ω–∞)
                numeric_part = short_link.split("/")[-1]
                short_links.append(numeric_part)
                print(f"Request {i}: Success - {short_link}")
            else:
                print(f"Request {i}: Failed with status {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        assert successful_responses == num_requests, f"Expected {num_requests} successful requests, got {successful_responses}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
        assert len(short_links) == len(set(short_links)), f"Duplicate short links found: {short_links}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        for link in short_links:
            assert link.isdigit(), f"Short link {link} is not numeric"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É
            base_number = int(link[:-1])  # –í—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã
            control_digit = int(link[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ñ—Ä–∞
            expected_control = await calculate_control_digit(base_number)
            assert control_digit == expected_control, f"Control digit mismatch for {link}"
        
        print(f"‚úì Successfully created {num_requests} unique short links in parallel")

@pytest.mark.asyncio(loop_scope="session")
async def test_parallel_redirect_requests():
    # –°—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    test_links = ["100014",
                   "100021", 
                   "100038", 
                   "100045", 
                   "100052",
                   "100076",
                   "100090"]
    
    async def perform_redirect(client, link):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞"""
        response = await client.get(link)
        return response
    
    async with AsyncClient(
        transport=ASGITransport(app=app), base_url="http://test"
    ) as ac:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        tasks = [perform_redirect(ac, link) for link in test_links]
        responses = await asyncio.gather(*tasks)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
        successful_redirects = 0
        redirect_statuses = []
        
        for i, response in enumerate(responses):
            # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫ –æ–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 307 (Temporary Redirect) –∏–ª–∏ 308 (Permanent Redirect)
            if response.status_code in [307, 308]:
                successful_redirects += 1
                redirect_url = response.headers.get("location", "No location header")
                redirect_statuses.append({
                    "link": test_links[i],
                    "status": response.status_code,
                    "location": redirect_url
                })
                print(f"Redirect {i}: Success - {test_links[i]} -> {redirect_url} (Status: {response.status_code})")
            else:
                print(f"Redirect {i}: Failed for {test_links[i]} with status {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        assert successful_redirects == len(test_links), f"Expected {len(test_links)} successful redirects, got {successful_redirects}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –≤–µ–¥—É—Ç –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ URL
        for status_info in redirect_statuses:
            assert status_info["location"].startswith(("http://", "https://")), f"Invalid redirect location: {status_info['location']}"
        
        print(f"‚úì Successfully processed {len(test_links)} parallel redirect requests")
